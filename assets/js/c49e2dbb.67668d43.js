(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[8864],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=i.createContext({}),c=function(t){var e=i.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=c(t.components);return i.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?i.createElement(g,a(a({ref:e},u),{},{components:n})):i.createElement(g,a({ref:e},u))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2936:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var i=n(2122),r=n(9756),o=(n(7294),n(3905)),a=["components"],l={id:"howto-kotlin-architecure-resillient4j-rate-limit",title:"Rate limit",sidebar_label:"Rate limit"},s={unversionedId:"howto/kotlin/architecture/howto-kotlin-architecure-resillient4j-rate-limit",id:"howto/kotlin/architecture/howto-kotlin-architecure-resillient4j-rate-limit",isDocsHomePage:!1,title:"Rate limit",description:"Rate limit is usefull to block malicious users, this section does not cover the HEADERS or store client information if the purpose is to charge the custumer for api usage.",source:"@site/docs/howto/kotlin/architecture/resillient4j-rate-limit.md",sourceDirName:"howto/kotlin/architecture",slug:"/howto/kotlin/architecture/howto-kotlin-architecure-resillient4j-rate-limit",permalink:"/docs/howto/kotlin/architecture/howto-kotlin-architecure-resillient4j-rate-limit",version:"current",sidebar_label:"Rate limit",frontMatter:{id:"howto-kotlin-architecure-resillient4j-rate-limit",title:"Rate limit",sidebar_label:"Rate limit"}},c=[{value:"Step 1:",id:"step-1",children:[]},{value:"Infrastructure",id:"infrastructure",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Add the applycation.yml rate limit config",id:"add-the-applycationyml-rate-limit-config",children:[]},{value:"Create an custom notation",id:"create-an-custom-notation",children:[]},{value:"Using the annotation:",id:"using-the-annotation",children:[]},{value:"Aspect Test",id:"aspect-test",children:[]}],u={toc:c};function p(t){var e=t.components,n=(0,r.Z)(t,a);return(0,o.kt)("wrapper",(0,i.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Rate limit is usefull to block malicious users, this section does not cover the HEADERS or store client information if the purpose is to charge the custumer for api usage."),(0,o.kt)("h2",{id:"step-1"},"Step 1:"),(0,o.kt)("p",null,"Install resillient 4J and ",(0,o.kt)("a",{parentName:"p",href:"/docs/howto/docker/docker-compose/redis"},"Redis")," "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'implementation("io.github.resilience4j:resilience4j-kotlin:1.7.0")\nimplementation("io.github.resilience4j:resilience4j-spring-boot2:1.7.0")\n\nimplementation("org.springframework.data:spring-data-redis")\nimplementation("es.moki.ratelimitj:ratelimitj-core:0.7.0-RC3")\nimplementation("es.moki.ratelimitj:ratelimitj-redis:0.7.0-RC3")\n')),(0,o.kt)("p",null,"build.gradlew"),(0,o.kt)("h2",{id:"infrastructure"},"Infrastructure"),(0,o.kt)("p",null,"Rate limit uses redis to calculate ammount of calls per key, to install follow the following guide:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/howto/docker/docker-compose/redis"},"Adding regis do docker"))),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Add a configuration file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Configuration\nclass RateLimitConfig {\n    @Value("\\${rate-limit.maxThroughput}")\n    var maxThroughput: Long = 0\n\n    @Value("\\${rate-limit.slidingWindowSize}")\n    var slidingWindowSize: Long = 0\n\n    @Value("\\${vcap.services.rate-limit-cache.credentials.host:localhost}")\n    lateinit var redisHost: String\n}\n')),(0,o.kt)("p",null,"rateLimitConfig.kt"),(0,o.kt)("h2",{id:"add-the-applycationyml-rate-limit-config"},"Add the applycation.yml rate limit config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"rate-limit:\n  maxThroughput: 100\n  slidingWindowSize: 60  # in seconds for TIME_BASED window-type\n")),(0,o.kt)("p",null,"application.yml"),(0,o.kt)("h2",{id:"create-an-custom-notation"},"Create an custom notation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Retention(AnnotationRetention.RUNTIME)\n@Target(AnnotationTarget.FUNCTION)\nannotation class RateLimit(\n    val rateKey: String\n)\n\n@Aspect\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Component\nclass RateLimitAspect(rateLimitConfig: RateLimitConfig) {\n\n    private val rules: Set<RequestLimitRule> = Collections.singleton(RequestLimitRule.of(Duration.ofSeconds(rateLimitConfig.slidingWindowSize), rateLimitConfig.maxThroughput))\n    private val redisUrl = "redis://${rateLimitConfig.redisHost}:6379"\n    private val factory: RequestRateLimiterFactory = RedisRateLimiterFactory(RedisClient.create(redisUrl))\n\n    @Around("@annotation(com.volkswagen.identitykit.security.RateLimit)")\n    fun rateLimit(joinPoint: ProceedingJoinPoint): Any? {\n        val key = getKey(joinPoint)\n\n        val requestRateLimiter = factory.getInstance(rules)\n        val isLimitReached = requestRateLimiter.overLimitWhenIncremented(key)\n\n        if (isLimitReached) {\n            throw TooManyRequestsException()\n        }\n        return joinPoint.proceed()\n    }\n\n    private fun getKey(joinPoint: ProceedingJoinPoint): String? {\n        val rateLimitAnnotation = getRateLimitAnnotation(joinPoint)\n        return SpelExpressionParser().parseExpression(rateLimitAnnotation.rateKey)\n            .getValue(joinPoint, String::class.java)\n    }\n\n    private fun getRateLimitAnnotation(joinPoint: ProceedingJoinPoint): RateLimit {\n        val signature: MethodSignature = joinPoint.signature as MethodSignature\n        return signature.method.getAnnotation(RateLimit::class.java)\n    }\n}\n')),(0,o.kt)("p",null,"RateLimitAspec.kt"),(0,o.kt)("h2",{id:"using-the-annotation"},"Using the annotation:"),(0,o.kt)("p",null,"We need a key to count the calls, the ",(0,o.kt)("inlineCode",{parentName:"p"},"args[1]"),' is going to make the annotation to use that value ("userId") as the key for rate limmiting.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RestController\nclass Controller {\n    @PostMapping("/enpoint/{app}/{userName}")\n    @RateLimit("\'storeV2-\'+args[1]")\n    fun storeV2(@PathVariable app: String, @PathVariable userId: String): ResponseEntity<Any> {\n        // ...\n    }\n}\n')),(0,o.kt)("p",null,"somecontroller.kt"),(0,o.kt)("h2",{id:"aspect-test"},"Aspect Test"),(0,o.kt)("p",null,"Tests for the custom annotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass RateLimitAspectTest {\n\n    @Autowired\n    lateinit var client: TestRestTemplate\n\n    @Test\n    fun `should not limit usages`() {\n        val response = client.getForEntity("/rate-limiter-mock/rate/some-user", String::class.java)\n        assertThat(response.statusCode).isEqualTo(HttpStatus.OK)\n    }\n\n    @Test\n    fun `should limit on reaching threashold`() {\n        var response: ResponseEntity<String>? = null\n        repeat(11) {\n            response = client.getForEntity("/rate-limiter-mock/rate/some-user", String::class.java)\n        }\n\n        assertThat(response!!.statusCode).isEqualTo(HttpStatus.TOO_MANY_REQUESTS)\n    }\n}\n\n@RestController\nclass RateLimitController {\n    @GetMapping("/rate-limiter-mock/rate/{userId}")\n    @RateLimit("\'rate\' + args[0]")\n    fun rate(@PathVariable userId: String): ResponseEntity<String> {\n        return ResponseEntity.ok(userId)\n    }\n}\n')),(0,o.kt)("p",null,"RateLimitAspectTest.kt"))}p.isMDXComponent=!0}}]);