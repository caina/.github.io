(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[2498],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),m=s(t),f=a,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||o;return t?r.createElement(d,i(i({ref:n},l),{},{components:t})):r.createElement(d,i({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1111:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],u={},c={unversionedId:"howto/kotlin/s3/kotlin-s3",id:"howto/kotlin/s3/kotlin-s3",isDocsHomePage:!1,title:"kotlin-s3",description:"`",source:"@site/docs/howto/kotlin/s3/kotlin-s3.md",sourceDirName:"howto/kotlin/s3",slug:"/howto/kotlin/s3/kotlin-s3",permalink:"/docs/howto/kotlin/s3/kotlin-s3",version:"current",frontMatter:{}},s=[],l={toc:s};function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' implementation("com.amazonaws:aws-java-sdk-s3:1.11.822")\n')),(0,o.kt)("p",null,"build.gradlew.kts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'\n\n@Suppress("FunctionName")\n@ExtendWith(SpringExtension::class)\n@ActiveProfiles("integration", "stop-scheduled-import")\n@SpringBootTest\ninternal class S3PackageLoaderMockAmazonS3IT(\n    @Autowired val s3PackageLoader: S3PackageLoader,\n    @Autowired val amazonS3: AmazonS3,\n    @Value("\\${bucket.bucket}") private val bucketName: String,\n    @Value("\\${bucket.prefix}") private val prefix: String,\n    @Value("\\${full_export_tag}") private val fullExportTag: String\n) {\n\n    @TestConfiguration\n    open class Configuration {\n        @Bean\n        open fun amazonS3() = mockk<AmazonS3>(relaxed = true)\n    }\n\n    @Test\n    fun `loads files fails when transfer is aborted`() {\n        val packageName = "DEL.KT6KTZ.TP.D.GGO.ZIP.000640"\n\n        every { amazonS3.getObject(bucketName, "$prefix/$fullExportTag/$packageName") }.throws(AbortedException("Nope"))\n\n        s3PackageLoader.setAmazonS3(amazonS3)\n\n        assertThrows<S3TransferFailed> {\n            s3PackageLoader.withPackage(packageName) {}\n        }\n    }\n\n    @Test\n    fun `returns false if the configured s3 bucket does not exists`() {\n        every { amazonS3.listObjects(bucketName, "$prefix/003605").objectSummaries }.returns(emptyList())\n        val validS3Configuration = s3PackageLoader.isValidS3Configuration("003605")\n\n        assertFalse(validS3Configuration)\n    }\n\n    @Test\n    fun `returns true if the configured s3 bucket exists`() {\n        every { amazonS3.listObjects(bucketName, "$prefix/003605").objectSummaries }.returns(listOf(S3ObjectSummary()))\n        val validS3Configuration = s3PackageLoader.isValidS3Configuration("003605")\n\n        assertTrue(validS3Configuration)\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Component\nclass S3MediaStore(\n    private val s3Bucket: S3Bucket\n) : MediaStore, MediaUploader {\n\n    private val amazonS3: AmazonS3\n        get() = s3Bucket.amazonS3\n\n    companion object {\n        private const val DOCUMENTS = "documents"\n        private const val NOT_FOUND = 404\n    }\n\n    private fun upload(folder: String, name: String, inputStream: InputStream, size: Long) {\n        try {\n            if (!exists(folder, name)) {\n                putObject(folder, name, inputStream, size)\n            }\n        } catch (e: AbortedException) {\n            throw MediaUploader.UploadAborted(e)\n        }\n    }\n\n    private fun putObject(folder: String, name: String, inputStream: InputStream, size: Long) {\n        amazonS3.putObject(\n            s3Bucket.bucketName, "${s3Bucket.prefix}/$folder/$name", inputStream,\n            ObjectMetadata().apply {\n                contentLength = size\n            })\n    }\n\n    override fun uploadDocument(name: String, inputStream: InputStream, size: Long) =\n        upload(DOCUMENTS, name, inputStream, size)\n\n    override fun copyDocument(name: String, out: OutputStream) = copy(DOCUMENTS, name, out)\n\n\n\n    private fun exists(folder: String, name: String) =\n        amazonS3.doesObjectExist(s3Bucket.bucketName, "${s3Bucket.prefix}/$folder/$name")\n}\n\ndata class S3Bucket(val amazonS3: AmazonS3, val bucketName: String, val prefix: String)\n')),(0,o.kt)("p",null,"S3MediaStore.kt"))}p.isMDXComponent=!0}}]);