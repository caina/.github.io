(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[4514],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9390:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],s={id:"angular-advanced-snippets",title:"Angular advanced snippets and concepts",sidebar_label:"Angular Snippets"},c={unversionedId:"angular-advanced-snippets",id:"angular-advanced-snippets",isDocsHomePage:!1,title:"Angular advanced snippets and concepts",description:"angular",source:"@site/docs/angular-advanced-code-snippets.md",sourceDirName:".",slug:"/angular-advanced-snippets",permalink:"/docs/angular-advanced-snippets",version:"current",sidebar_label:"Angular Snippets",frontMatter:{id:"angular-advanced-snippets",title:"Angular advanced snippets and concepts",sidebar_label:"Angular Snippets"},sidebar:"someSidebar",previous:{title:"regex-cod3rs-class",permalink:"/docs/regex-cod3rs-class"},next:{title:"Flutter",permalink:"/docs/flutter-usefull-resources"}},l=[{value:"Styles",id:"styles",children:[]},{value:"Updating window.location.search without refresing page",id:"updating-windowlocationsearch-without-refresing-page",children:[]},{value:"Testing",id:"testing",children:[{value:"Ignoring unknown attributes:",id:"ignoring-unknown-attributes",children:[]},{value:"Combining HTTP requests",id:"combining-http-requests",children:[]},{value:"Mocking Window.Location",id:"mocking-windowlocation",children:[]},{value:"Mocking HttpRequest",id:"mocking-httprequest",children:[]}]},{value:"Performance",id:"performance",children:[{value:"Updating Components",id:"updating-components",children:[]},{value:"Observable unsubscrition",id:"observable-unsubscrition",children:[]}]},{value:"Patterns",id:"patterns",children:[{value:"Behavior subject",id:"behavior-subject",children:[]}]}],p={toc:l};function u(e){var n=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"angular",src:t(9).Z})),(0,i.kt)("h2",{id:"styles"},"Styles"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},":host {\n    // css here is only available in the component\n}\n")),(0,i.kt)("h2",{id:"updating-windowlocationsearch-without-refresing-page"},"Updating window.location.search without refresing page"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"constructor(\nprivate router: Router,\nprivate activatedRoute: ActivatedRoute\n){}\n\nsearch(searchInput: string){\n  this.router.navigate([], { \n    queryParamsHandling: 'merge',\n    queryParams: {search: encodeUri(searchInput)}\n  })\n}\n")),(0,i.kt)("h2",{id:"testing"},"Testing"),(0,i.kt)("p",null,"Try always keep the AAA approach: ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),"rrange, ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),"ct and ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),"ssert"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A component that tests an service is an ",(0,i.kt)("inlineCode",{parentName:"li"},"integration test")),(0,i.kt)("li",{parentName:"ul"},"A unit test is the one that only tests is ",(0,i.kt)("inlineCode",{parentName:"li"},"component")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"service"))),(0,i.kt)("p",null,"mockings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dumies: they are placeholders for simple classes"),(0,i.kt)("li",{parentName:"ul"},"Stubs: Mocks with implementation"),(0,i.kt)("li",{parentName:"ul"},"Spies: Its a mock that keep track of the methods that has been called"),(0,i.kt)("li",{parentName:"ul"},"True mock: Checks if a specific service has been called with specific parameters")),(0,i.kt)("p",null,"kind of tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Isolated: single unit test, can construct class by hand"),(0,i.kt)("li",{parentName:"ul"},"integration test: we need to create a component (TestBed)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Shallow: only the main component"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Deep: Rendering its child ")))),(0,i.kt)("p",null,"Quering the api"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fixture.nativeElement.querySelector(a).textContent\nfixture.debugElement.query(By.css('a')).nativeElement.textContent\n")),(0,i.kt)("h3",{id:"ignoring-unknown-attributes"},"Ignoring unknown attributes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"TestBed.configureTestingModule({\n    declarations: [HeroComponent],\n    schemas: [NO_ERRORS_SCHEMA] // ignore routerLink and others attributes\n});\n")),(0,i.kt)("h3",{id:"combining-http-requests"},"Combining HTTP requests"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/observable/forkJoin';\ngetVehicles(): Observable<any> {\n  const cars = this.http.get(CARS_ENDPOINT).map(res => res.json());\n  const bikes = this.http.get(BIKES_ENDPOINT).map(res => res.json());\n  \n  return Observable.forkJoin([cars, bikes])\n     .map(responses => {\n        // responses[0] => cars\n        // responses[1] => bikes\n     });\n}\n")),(0,i.kt)("h3",{id:"mocking-windowlocation"},"Mocking Window.Location"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function mockWindowLocation(search: string) {\n    delete window.location;\n    window.location = {\n      ancestorOrigins: undefined,\n      hash: '',\n      host: '',\n      hostname: '',\n      href: '',\n      origin: '',\n      pathname: '',\n      port: '',\n      protocol: '',\n      assign(url: string): void {\n      },\n      reload(forcedReload?: boolean): void {\n      },\n      replace(url: string): void {\n      },\n      search\n    };\n  }\n")),(0,i.kt)("h3",{id:"mocking-httprequest"},"Mocking HttpRequest"),(0,i.kt)("p",null,"for httprequests we can use a ",(0,i.kt)("inlineCode",{parentName:"p"},"RouterTestingModule")," that enables us to spy, in this case Im using Jest"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"it('test', () => {\n    TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n    }).compileComponents();\n\n    const navigateSpy = spyOn(TestBed.get(Router), 'navigate');\n    expect(navigateSpy).toHaveBeenCalledWith(['route'], {\n      queryParams: {search: '654654'}\n    });\n});\n")),(0,i.kt)("h2",{id:"performance"},"Performance"),(0,i.kt)("h3",{id:"updating-components"},"Updating Components"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-timer',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerComponent {\n    \n    constructor(public timer: TimerService, private cdRef: ChangeDetectorRef) { }\n\n    updateit(){\n        this.cdRef.markForCheck();\n    }\n}\n")),(0,i.kt)("h3",{id:"observable-unsubscrition"},"Observable unsubscrition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'export class TimerComponent implements OnInit, OnDestroy {\n private countdownEndSubscription: Subscription = null;\n private countdownSubscription: Subscription = null;\n\n   ngOnInit(): void {\n     this.countdownEndSubscription = this.timer.countdownEnd$.subscribe(() => {\n       console.log("do thing");\n     })\n \n     this.countdownSubscription = this.timer.countdown$.subscribe((data) => {\n         console.log("do thing");\n    });\n   }\n \n   ngOnDestroy(): void {\n     this.countdownEndSubscription.unsubscribe();\n     this.countdownSubscription.unsubscribe();\n   }\n}\n')),(0,i.kt)("h2",{id:"patterns"},"Patterns"),(0,i.kt)("h3",{id:"behavior-subject"},"Behavior subject"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Injectable()\nexport class TimerService {\n    private countdownEndSource = new Subject<void>();\n    public countdownEnd$ = this.countdownEndSource.asObservable();\n\n    public test() {\n        this.countdownEndSource.next()\n    }\n}\n\n// usage\n// <app-display [time]="timer.countdown$ | async"></app-display>\n')))}u.isMDXComponent=!0},9:function(e,n,t){"use strict";n.Z=t.p+"assets/images/angulares-80ac885d8dabe1d3014bb1f3970a6506.jpg"}}]);