(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[8997],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=l,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3543:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var n=a(2122),l=a(9756),r=(a(7294),a(3905)),i=["components"],o={id:"bash-shell",title:"Bash Script snippets and tips",sidebar_label:"Bash Snippets"},s={unversionedId:"bash-shell",id:"bash-shell",isDocsHomePage:!1,title:"Bash Script snippets and tips",description:"Bash scripts repo",source:"@site/docs/bash-shell.md",sourceDirName:".",slug:"/bash-shell",permalink:"/docs/bash-shell",version:"current",sidebar_label:"Bash Snippets",frontMatter:{id:"bash-shell",title:"Bash Script snippets and tips",sidebar_label:"Bash Snippets"},sidebar:"someSidebar",previous:{title:"The Open Source Computer Science Degree",permalink:"/docs/the-open-source-computer-science-degree"},next:{title:"Kotlin Coursera class",permalink:"/docs/kotlin-coursera-class"}},p=[{value:"Commands usefull",id:"commands-usefull",children:[]},{value:"Navigating with CD",id:"navigating-with-cd",children:[]},{value:"Tempalte of a bash file",id:"tempalte-of-a-bash-file",children:[]},{value:"Assining the output of a command in a variable",id:"assining-the-output-of-a-command-in-a-variable",children:[]},{value:"Variable",id:"variable",children:[{value:"names",id:"names",children:[]}]},{value:"File operators",id:"file-operators",children:[{value:"String operators",id:"string-operators",children:[]},{value:"number operators",id:"number-operators",children:[]}]},{value:"If condition",id:"if-condition",children:[{value:"Using if to check if it contains value",id:"using-if-to-check-if-it-contains-value",children:[]}]},{value:"for loops",id:"for-loops",children:[]},{value:"Positional Parameters",id:"positional-parameters",children:[{value:"user input",id:"user-input",children:[]}]},{value:"Exit status",id:"exit-status",children:[{value:"checkong the exit status",id:"checkong-the-exit-status",children:[]},{value:"&amp;&amp; and ||",id:"-and-",children:[]},{value:"the semicolon",id:"the-semicolon",children:[]}]},{value:"Functions",id:"functions",children:[{value:"Parameters",id:"parameters",children:[]}]},{value:"WildCards",id:"wildcards",children:[{value:"Most used wildcards",id:"most-used-wildcards",children:[]}]},{value:"Case statements",id:"case-statements",children:[]},{value:"Logs",id:"logs",children:[]},{value:"While loops",id:"while-loops",children:[]},{value:"Debugging",id:"debugging",children:[]},{value:"Grep",id:"grep",children:[]},{value:"Sed: stream editor",id:"sed-stream-editor",children:[{value:"Delete or remove data",id:"delete-or-remove-data",children:[]},{value:"Using sed to get xml tag elements of an zipped element",id:"using-sed-to-get-xml-tag-elements-of-an-zipped-element",children:[]},{value:"Using sed to rename bash variables",id:"using-sed-to-rename-bash-variables",children:[]}]}],d={toc:p};function u(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://gitlab.com/caina-learning/shell-script"},"Bash scripts repo")),(0,r.kt)("p",null,"the header of a bash script is a definition of the interpreter for the machine, its usually called shebang (",(0,r.kt)("inlineCode",{parentName:"p"},"!#"),")"),(0,r.kt)("p",null,"if its not informed, it still can work, but the executer will take an interpreter as the default, its better to especify always"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash")),(0,r.kt)("h3",{id:"commands-usefull"},"Commands usefull"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Kill all node appsn ",(0,r.kt)("inlineCode",{parentName:"li"},"Killall node npm")),(0,r.kt)("li",{parentName:"ul"},"one ",(0,r.kt)("inlineCode",{parentName:"li"},">")," send a content to a file, ",(0,r.kt)("inlineCode",{parentName:"li"},">>")," appends"),(0,r.kt)("li",{parentName:"ul"},"stop all docker containers ",(0,r.kt)("inlineCode",{parentName:"li"},"docker stop $(docker ps -a -q)")," or to remove: ",(0,r.kt)("inlineCode",{parentName:"li"},"docker rm $(docker ps -a -q)")),(0,r.kt)("li",{parentName:"ul"},"Wait for server to be up and running:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'wait_for_it () {\n  local LIMIT=20\n  while ! curl -s --fail $1 >/dev/null\n  do\n      if (($LIMIT == 0))\n      then\n        exit 1;\n      fi\n\n      echo "app has not started yet, atempts left: $LIMIT"\n      sleep 5\n      ((LIMIT--))\n  done\n  echo "ready to go"\n}\n')),(0,r.kt)("h3",{id:"navigating-with-cd"},"Navigating with CD"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd ../")," goes one folder up"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd ~/")," goes to home"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd -")," goes back to last location\nexample")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd ~/ \nyou navigate to home\n\ncd folder/inner/folder\nyou go into various folder at once\n\ncd -\nyou are back to home\n")),(0,r.kt)("h3",{id:"tempalte-of-a-bash-file"},"Tempalte of a bash file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the Shebang (",(0,r.kt)("inlineCode",{parentName:"li"},"#!/bin/bash"),")"),(0,r.kt)("li",{parentName:"ul"},"Comments/file header"),(0,r.kt)("li",{parentName:"ul"},"Global variables"),(0,r.kt)("li",{parentName:"ul"},"Functions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Dont forget to use ",(0,r.kt)("inlineCode",{parentName:"li"},"local")," variables"))),(0,r.kt)("li",{parentName:"ul"},"Main script contents"),(0,r.kt)("li",{parentName:"ul"},"Exit with an status"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"multiples exits during the application")))),(0,r.kt)("h5",{id:"listing-items-in-a-folder"},"listing items in a folder:"),(0,r.kt)("p",null,"the star is taking any that has .jpg\n",(0,r.kt)("inlineCode",{parentName:"p"},"VAR=$(ls *.jpg)")),(0,r.kt)("h2",{id:"assining-the-output-of-a-command-in-a-variable"},"Assining the output of a command in a variable"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SERVER_NAME=$(hostname)"),"\nits always in the rounds\nan old alternative would be like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"SERVER_NAME=`hostname`\n")),(0,r.kt)("h2",{id:"variable"},"Variable"),(0,r.kt)("p",null,"All variables by default are GLOBAL!\nand they have to be defined before used"),(0,r.kt)("p",null,"to use local variables, use the keyword: ",(0,r.kt)("inlineCode",{parentName:"p"},"LOCAL")," before the variable name, as:\n",(0,r.kt)("inlineCode",{parentName:"p"},"local LOCAL_VAR=1")," and they are scoped to theyrs functions."),(0,r.kt)("h3",{id:"names"},"names"),(0,r.kt)("p",null,'take care with special variables like "PATH"'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"valid"),(0,r.kt)("th",{parentName:"tr",align:null},"invalid"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FIST3LETTERS"),(0,r.kt)("td",{parentName:"tr",align:null},"3LETTERS")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FIRST_THREE_LETTERS"),(0,r.kt)("td",{parentName:"tr",align:null},"first-three-letters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"firstThreeLetters"),(0,r.kt)("td",{parentName:"tr",align:null},"first@three@letters")))),(0,r.kt)("p",null,"important: while assiging values to an variable, do not use spaces"),(0,r.kt)("h2",{id:"file-operators"},"File operators"),(0,r.kt)("p",null,"conditions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[ -e /etc/passwd ]\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"operator"),(0,r.kt)("th",{parentName:"tr",align:null},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-d FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"this if file is directory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-e FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"true if file exists")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-f FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"true if file exists and is a regular file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-r FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"true if file is readble by you")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-s FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"true if file exists and is not empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-w FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"true if file is writable by you")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-x FILE"),(0,r.kt)("td",{parentName:"tr",align:null},"true if the file is executable by you")))),(0,r.kt)("h3",{id:"string-operators"},"String operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"operator"),(0,r.kt)("th",{parentName:"tr",align:null},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-z STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"true if string is empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-n STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"true if string is not empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STRING1=STRING2"),(0,r.kt)("td",{parentName:"tr",align:null},"true if the strings are equals")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STRING1!=STRING2"),(0,r.kt)("td",{parentName:"tr",align:null},"true if the strings are not equals")))),(0,r.kt)("h3",{id:"number-operators"},"number operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"operator"),(0,r.kt)("th",{parentName:"tr",align:null},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg1 -eq arg2"),(0,r.kt)("td",{parentName:"tr",align:null},"first arg equals to second")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg1 -ne arg2"),(0,r.kt)("td",{parentName:"tr",align:null},"if arg1 is not equal second")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg1 -lt arg2"),(0,r.kt)("td",{parentName:"tr",align:null},"arg1 less than arg2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg1 -le arg2"),(0,r.kt)("td",{parentName:"tr",align:null},"arg1 less than or equal to arg2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg1 -gt arg2"),(0,r.kt)("td",{parentName:"tr",align:null},"arg1 greater than arg2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg1 -ge arg2"),(0,r.kt)("td",{parentName:"tr",align:null},"arg1 greater than or equal to arg2")))),(0,r.kt)("h2",{id:"if-condition"},"If condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"if [condition-is-true]\nthen\n    command 1\n    command 2\nfi\n")),(0,r.kt)("p",null,"else:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"if[ ]\nthen\n    -command\nelse\nfi\n")),(0,r.kt)("p",null,"else if:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"if[]\nthen\n    -command\nelif[]\nthen\n    -command\nelse\n    -command\nfi\n")),(0,r.kt)("h3",{id:"using-if-to-check-if-it-contains-value"},"Using if to check if it contains value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'instanceNo=`unzip -p -qq $1 ${fileunderzip} | grep instance-no`\nif [[ ${instanceNo} =~ "645234345" ]]; then\n    echo "dale"\nfi\n')),(0,r.kt)("h2",{id:"for-loops"},"for loops"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"for VARIABLE_NAME in ITEM1 ITEM2\ndo\n    -command\n    -commnad\ndone\n")),(0,r.kt)("p",null,"to iterate through a fori loop is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"for ((i=1;i<=50;i++));\ndo\n    echo $i\ndone\n")),(0,r.kt)("h2",{id:"positional-parameters"},"Positional Parameters"),(0,r.kt)("p",null,"you can access the parameters using\n",(0,r.kt)("inlineCode",{parentName:"p"},"script.sh parameter1 parameter2 parameter 3")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"position"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$0"),(0,r.kt)("td",{parentName:"tr",align:null},"script.sh")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$1"),(0,r.kt)("td",{parentName:"tr",align:null},"parameter1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$2"),(0,r.kt)("td",{parentName:"tr",align:null},"parameter2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$3"),(0,r.kt)("td",{parentName:"tr",align:null},"parameter3")))),(0,r.kt)("p",null,"to acess all of them you can use: ",(0,r.kt)("inlineCode",{parentName:"p"},"$@"),"\nfor loop throught all the inputs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'for USER in $@\ndo\n    echo "Archiving user: $USER"\ndone\n')),(0,r.kt)("h3",{id:"user-input"},"user input"),(0,r.kt)("p",null,"to read commands accepts STDIN\n",(0,r.kt)("inlineCode",{parentName:"p"},'read -p "PROMPT" VARIABLE'),"\nfor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'read -p "enter an user" USER\necho "archiving user: $USER"\n')),(0,r.kt)("h2",{id:"exit-status"},"Exit status"),(0,r.kt)("p",null,"Every command returns and exit code from 0 to 255\nbeing 0 sucess and grater than it an error"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"to explicity define a return code\n",(0,r.kt)("inlineCode",{parentName:"p"},"exit 0"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"exit 2"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"exit 255"),"\nyou can use it always to exit the script"),(0,r.kt)("h3",{id:"checkong-the-exit-status"},"checkong the exit status"),(0,r.kt)("p",null,"to get the previous command exit status, use:\n",(0,r.kt)("inlineCode",{parentName:"p"},"$?"),"\nas an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ls /not/here\necho "$?"\n')),(0,r.kt)("p",null,"example checking google ping"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'HOST="google.com"\nping -c 1 $HOST\nif [ "$?" -eq "0" ]\nthen\n    echo "$HOST reachable"\nelse \n    echo "$HOST unreached"\nfi\n')),(0,r.kt)("p",null,"this can be as well given to an variable, like:\n",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN_CODE=$?")),(0,r.kt)("h3",{id:"-and-"},"&& and ||"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"&&"),' is the "and" operator, it just execute the next if the previous was succesfull\n',(0,r.kt)("inlineCode",{parentName:"p"},"mkdir /tmp/bak && cp test.txt /tmp/bak")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"||"),' is the "or" and will be executed if the previous command fail\n',(0,r.kt)("inlineCode",{parentName:"p"},"cp test.txt /tmp/bak || cp test.txt /tmp")),(0,r.kt)("p",null,"we can rewrite the previous code as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'HOST="google.com"\nping -c 1 $HOST && echo "$HOST reachable"\n')),(0,r.kt)("h3",{id:"the-semicolon"},"the semicolon"),(0,r.kt)("p",null,"Separate comands with the semicolon to ensure all get executed"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cp test.txt /tmp/bak ; cp test.text /tmp"),"\nit does not check the status of the previous commands, ots the same as using the commands in new lines"),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"there is 2 ways to create a function\nthey must be declare before being executed, but if you call a function inside a function it would be ok."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"function function-name(){\n    # code goes here\n}\n\nfunction-name(){\n    # code goes here\n}\n")),(0,r.kt)("p",null,"and to call a function is just call the name as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'function hello(){\n    echo "Hello"\n    now\n}\nfunction now(){\n    echo "its ${date -%r}"\n}\nhello\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Exit status:\nfunctions have an exit status and can be explicity define on the ",(0,r.kt)("inlineCode",{parentName:"p"},"exit")," or explicity by the result of the last command executed."),(0,r.kt)("p",null,"to avoid funtions to exit the shell script, add an ",(0,r.kt)("inlineCode",{parentName:"p"},"set -e")," to its content, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"function sample(){\n    set -e \n \n\n    exit 1\n}\nsample\necho $?\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Function parameters:\nfunctions can acess parameters using $1, $2 or $@ to all,\nand can acess global variables."),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"functions parameters works pretty much like the shell parameters\ntake this as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'function hello() {\n    echo "Hello $1"\n}\nhello Jason\n>> output: Hello Jason\n')),(0,r.kt)("p",null,"so its not necessary to provide any bracket.\nto loop through all the inputs of a function is simple as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'function hello(){\n    for NAME in $@\n    do\n        echo "Hello $NAME"\n    done\n}\nhello Jason Dan Ryan\n')),(0,r.kt)("h4",{id:"exit-status-of-a-function"},"Exit status of a function"),(0,r.kt)("p",null,"to get the exit status of the function is simple as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"my_function\necho $?\n")),(0,r.kt)("p",null,"a good example of how to use it would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'function backup_file() {\n    if [ -f $1 ]\n    then\n        local BACK="/tmp/$(basename ${1}).$(date +%F).$$"\n        echo "Backing up $1 to ${BACK}"\n        cp $1 $BACK\n    fi\n}\nbackup_file /ect/hosts\nif [ $? -eq 0 ]\nthen\n    echo "Backup Succeeded"\nfi\n')),(0,r.kt)("h2",{id:"wildcards"},"WildCards"),(0,r.kt)("p",null,"its a character os string to use for pattern matching, we can use them with commands like ",(0,r.kt)("inlineCode",{parentName:"p"},"ls, rm, cp"),", common called globbing operation."),(0,r.kt)("h3",{id:"most-used-wildcards"},"Most used wildcards"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"matcher"),(0,r.kt)("th",{parentName:"tr",align:null},"example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"*"),") Matches zero or more characters"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},".txt; a"),"; a*.txt")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"?"),") matches exacly one character"),(0,r.kt)("td",{parentName:"tr",align:null},"?.txt (f.txt) ; a? (as); a?.txt (as.txt)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[]"),") character class, matches any character included between the brackets"),(0,r.kt)("td",{parentName:"tr",align:null},"- ca","[nt]","* ;can; cat; candy; catch")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[!aeiou]*"),")to exclude characters, use the ",(0,r.kt)("inlineCode",{parentName:"td"},"!")),(0,r.kt)("td",{parentName:"tr",align:null},"baseball; cricket;")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[a-g]*"),") matches all the files on a range"),(0,r.kt)("td",{parentName:"tr",align:null},"a,b,c,d,e,f,g")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[3-6]*"),") matches number from 3 to 6"),(0,r.kt)("td",{parentName:"tr",align:null},"1,2,3,4,5,6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[[:alpha]]"),") alphanumerics"),(0,r.kt)("td",{parentName:"tr",align:null},"a; A;b;B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[[:alnum]]"),") Alphanumerics"),(0,r.kt)("td",{parentName:"tr",align:null},"A;b;1;")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[[:digit]]"),") Digits"),(0,r.kt)("td",{parentName:"tr",align:null},"0 to 9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[[:lower]]"),") lower case names"),(0,r.kt)("td",{parentName:"tr",align:null},"a;b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[[:space]]"),") spaces"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"}," "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("inlineCode",{parentName:"td"},"[[:upper]]"),") uppercase"),(0,r.kt)("td",{parentName:"tr",align:null},"A;B")))),(0,r.kt)("p",null,"to scape wildcards is just add a backslash ",(0,r.kt)("inlineCode",{parentName:"p"},"\u02c6*\\?")," will match ",(0,r.kt)("inlineCode",{parentName:"p"},"done?")),(0,r.kt)("p",null,"to use this wildcards in a bash script you can do something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd /var/www\nfor FILE in *.html\ndo\n    cp $FILE /var/www-just-html\ndone\n")),(0,r.kt)("h2",{id:"case-statements"},"Case statements"),(0,r.kt)("p",null,"same as switch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'case "$1" in \n    start|START)\n        /usr/sbin/sshd\n        ;;\n    stop)\n        kill $(cat /var/run/sshd.pid)\n        ;;\n    [yY][yY][eE][sS]\n        echo "you said yes, that makes no sense"\n        ;;\n    *)\n        echo "Usage: $0 start|stop"; exit 1\n        ;;\nesac\n')),(0,r.kt)("h2",{id:"logs"},"Logs"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"facility"),(0,r.kt)("th",{parentName:"tr",align:null},"severity"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"kern"),(0,r.kt)("td",{parentName:"tr",align:null},"emerg")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user"),(0,r.kt)("td",{parentName:"tr",align:null},"alert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mail"),(0,r.kt)("td",{parentName:"tr",align:null},"crit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"daemon"),(0,r.kt)("td",{parentName:"tr",align:null},"error")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"auth"),(0,r.kt)("td",{parentName:"tr",align:null},"warn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"local0 -> local7"),(0,r.kt)("td",{parentName:"tr",align:null},"notice")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"info")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"debug")))),(0,r.kt)("p",null,"the most severe message is ",(0,r.kt)("inlineCode",{parentName:"p"},"emerg")," and the lowest is ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),". most syst store the logs at:\n",(0,r.kt)("inlineCode",{parentName:"p"},"/var/log/message")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/log/syslog")," but it depends of your system."),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"To use them, the simple command is: ",(0,r.kt)("inlineCode",{parentName:"li"},'logger "message"')),(0,r.kt)("li",{parentName:"ul"},"but to define an severity would be: ",(0,r.kt)("inlineCode",{parentName:"li"},'logger -p local0.info "message"')),(0,r.kt)("li",{parentName:"ul"},"to attach the name of your script: ",(0,r.kt)("inlineCode",{parentName:"li"},'logger -t myscript -p emerg "message"')," and to add the PID, include an ",(0,r.kt)("inlineCode",{parentName:"li"},"-i")," before the ",(0,r.kt)("inlineCode",{parentName:"li"},"-t")," in the previous script"))),(0,r.kt)("p",null,"if in addition to store this logs you want to print them in the console, include an ",(0,r.kt)("inlineCode",{parentName:"p"},"-s")," to your script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'logit () {\n    local LOG_LEVEL=$1\n    shift\n    MSG=$0\n    TIMESTAMP=$(date +"%Y-%m-%d %T")\n    if [ $LOG_LEVEL = \'ERROR\'] || $VERBOSE\n    then\n        echo "${TIMESTAMP} ${HOST} ${PROGRAM_NAME}[${PID}]: ${LOG_LEVEL} ${MSG}"\n    fi\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Shift"),' shift the positional parameters to the left, removing the first paramter that has been used in "LOG_LEVEL" and setting the rest of the variables to "MSG"'),(0,r.kt)("p",null,"so using this script would be like:",(0,r.kt)("inlineCode",{parentName:"p"},'fetch-data $HOST || logit ERROR "Could not fetch from $HOST"')),(0,r.kt)("h2",{id:"while-loops"},"While loops"),(0,r.kt)("p",null,"If a command return an non 0 exit status, the loop stops,\na basic usage would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"while [ CONDITION_IS_TRUE ]\ndo\n    command\ndone\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"important: commands do not change the while condition!")),(0,r.kt)("p",null,"to create a kind of service, we can use the ",(0,r.kt)("em",{parentName:"p"},"sleep")," command for a given second."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'INDEX=1\nwhile [ $INDEX -lt 6 ]\ndo\n    echo "Creating project -${INDEX}"\n    mkdir /usr/local/project-${index}\n    ((INDEX++))\ndone\n')),(0,r.kt)("p",null,"an example checking the user imput:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'while [ "${CORRECT}" != "y" ]\ndo\n    read -p "ENTER YOUR NAME:" NAME\n    read -p "IS ${NAME} CORRECT?" CORRECT\ndone\n')),(0,r.kt)("p",null,"example of an script that checks if a server is down, being ",(0,r.kt)("inlineCode",{parentName:"p"},"app1")," our application url"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'while ping -c 1 app1 >/dev/null\ndo\n    echo "app1 still up"\n    sleep 5\ndone\necho "app1 down, continue"\n')),(0,r.kt)("p",null,"if you read a file through a loop, bash will read it word by word, to read line by line we would do something like it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'LINE_NUMBER=1\nwhile read LINE\ndo\n    echo "${LINE_NUM}: ${LINE}"\n    ((LINE_NUM++))\ndone < /etc/fstab\n')),(0,r.kt)("p",null,"or to read a file through a command is like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'grep xfs /etc/fstab | while read LINE\ndo\n    echo "xsf: ${LINE}"\ndone\n')),(0,r.kt)("p",null,"and to split it into multiple lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'FS_NUM=1\ngrep xfs /etc/fstab | while read FS MP REST\ndo\n    echo "${FS_NUM}: file system: ${FS}"\n    echo "${FS_NUM}: file system: ${MP}"\n    ((FS_NUM++))\ndone\n')),(0,r.kt)("p",null,"and to stop a while loop without exiting the script use a ",(0,r.kt)("inlineCode",{parentName:"p"},"break"),", and to jump to next iteration, use ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"to debug, there is some options to print helpfull hints.\nto see all the options, type ",(0,r.kt)("inlineCode",{parentName:"p"},"help set | less")),(0,r.kt)("p",null,"This is trace debbuging:\n| comand | help|\n| -------| ----|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash -x")," | set at the header of the file an option to print it|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"set -x"),"   | prints commands as they execute|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"set +x"),"| to stop debugging|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"-e"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash -ex | -xe | -e -x| -x -e")," | makes the script to exit immediatly of an script ends with an non zero value |\n|",(0,r.kt)("inlineCode",{parentName:"p"},"-v")," | prints the shell commands as they are in the script|"),(0,r.kt)("p",null,"example of output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./31.sh\n+ LINE_NUMBER=0\n+ read LINE\n+ echo '0: root: 123'\n0: root: 123\n+ (( LINE_NUMBER++ ))\n+ read LINE\n+ echo '1: main: 321'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"commands with a plus sign are the commands executed by the script")),(0,r.kt)("h2",{id:"grep"},"Grep"),(0,r.kt)("p",null,"can be used to filter things, like folder list: ",(0,r.kt)("inlineCode",{parentName:"p"},"ls | grep search")),(0,r.kt)("h2",{id:"sed-stream-editor"},"Sed: stream editor"),(0,r.kt)("p",null,"stream are pipe operations. the sed command is used to perform text transformation on these streams, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Substitute some text for other text."),(0,r.kt)("li",{parentName:"ul"},"Remove lines."),(0,r.kt)("li",{parentName:"ul"},"Append text after given lines."),(0,r.kt)("li",{parentName:"ul"},"Insert text before certain lines.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"sed is used programmatically not iteractively.")),(0,r.kt)("p",null,"the most common use is to find and replace in command line, like: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'Swight is a the assistant regional manager.' > manager.txt;\nsed 's/assistant/assistant to the/'  manager.txt\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"output: Dwight is ths assistant to the regional manager.")),(0,r.kt)("p",null,'but it does not change the value of the manager.txt file.\nsed is case sensetive, to igonre it, end the command with in  "i", like: ',(0,r.kt)("inlineCode",{parentName:"p"},"s/TEXT/replace/i")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"by default sed just replace values one time per line, to replace this behaviour to all the file, add an ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," as follow: ",(0,r.kt)("inlineCode",{parentName:"p"},"/s/text/replace/g")," and to replace just the x number of the occurrence you can provide a number in the end, like: ",(0,r.kt)("inlineCode",{parentName:"p"},"s/text/replace/2"),", so only the second occurrence is going to be replaced.")),(0,r.kt)("p",null,"we can use the option ",(0,r.kt)("inlineCode",{parentName:"p"},"-i")," to modify the current file.\nto avoid having to scape any ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," character, you can use something like: ",(0,r.kt)("inlineCode",{parentName:"p"},"s#/home/jason/#/export/users/jasonc#"),", in other words, you don't need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," as a delimiter, you can use any special character."),(0,r.kt)("h3",{id:"delete-or-remove-data"},"Delete or remove data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sed '/this/d' file.txt\n")),(0,r.kt)("p",null,"this will delete every word ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," in the file.txt"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"removing with regex: ",(0,r.kt)("inlineCode",{parentName:"li"},"sed '/\u02c6#/d' config")),(0,r.kt)("li",{parentName:"ul"},"multiple sed commands: ",(0,r.kt)("inlineCode",{parentName:"li"},"sed '/^#/d ; /^$/d' config")),(0,r.kt)("li",{parentName:"ul"},"multiple sed commands ",(0,r.kt)("inlineCode",{parentName:"li"},"sed -e '/^#/d -e /^$/d' config")),(0,r.kt)("li",{parentName:"ul"},"we can use address in the beggining of the command like: ",(0,r.kt)("inlineCode",{parentName:"li"},"sed /Group s/apache/httpd/ config")," and it'll only apply for those who start with ",(0,r.kt)("inlineCode",{parentName:"li"},"/Group")),(0,r.kt)("li",{parentName:"ul"},"Address with line range: ",(0,r.kt)("inlineCode",{parentName:"li"},"sed '1,4 s/run/execute' config"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can create an sed file, with multiple instructions for each line and suply the file to the operation using ",(0,r.kt)("inlineCode",{parentName:"p"},"-f"),", like: ",(0,r.kt)("inlineCode",{parentName:"p"},"sed -f sed-script.sed config"))),(0,r.kt)("h3",{id:"using-sed-to-get-xml-tag-elements-of-an-zipped-element"},"Using sed to get xml tag elements of an zipped element"),(0,r.kt)("p",null,"This was usefull so why not take notes? the code is taking all the values from a zipped xml file, without unzipping it, we search for the tags ",(0,r.kt)("inlineCode",{parentName:"p"},'<title name="language">'),"\nthis returns an list of elements with the same tag, that's why the ",(0,r.kt)("inlineCode",{parentName:"p"}," | head -1")," is used for, it takes the first element of the list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'tagValue=$(unzip -p -qq $1 "fileToUnzip" | sed -n \'/title name="language"/{s/.*<title name="language">//;s/<\\/title.*//;p;}\' | head -1)\n')),(0,r.kt)("h3",{id:"using-sed-to-rename-bash-variables"},"Using sed to rename bash variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'filename="search for me"\nnewFile=$(sed "s/search/replace/g" <<< "$filename")\n')))}u.isMDXComponent=!0}}]);