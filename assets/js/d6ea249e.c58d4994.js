(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[6487],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(a),g=r,u=m["".concat(s,".").concat(g)]||m[g]||c[g]||l;return a?n.createElement(u,o(o({ref:t},d),{},{components:a})):n.createElement(u,o({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8292:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),o=["components"],i={},s={unversionedId:"regex-cod3rs-class",id:"regex-cod3rs-class",isDocsHomePage:!1,title:"regex-cod3rs-class",description:"Regex pela Cod3rs",source:"@site/docs/regex-cod3rs-class.md",sourceDirName:".",slug:"/regex-cod3rs-class",permalink:"/docs/regex-cod3rs-class",version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Kotlin Coursera class",permalink:"/docs/kotlin-coursera-class"},next:{title:"Angular advanced snippets and concepts",permalink:"/docs/angular-advanced-snippets"}},p=[{value:"Regex pela Cod3rs",id:"regex-pela-cod3rs",children:[]},{value:"Meta characters",id:"meta-characters",children:[{value:"(Dot) \u23fa meta character",id:"dot--meta-character",children:[]},{value:"white spaces",id:"white-spaces",children:[]},{value:"Using the pipe Or",id:"using-the-pipe-or",children:[]}]},{value:"Flags \ud83d\udea9",id:"flags-",children:[]},{value:"How to execute regex in some languages",id:"how-to-execute-regex-in-some-languages",children:[]},{value:"Basic characters",id:"basic-characters",children:[]},{value:"Sets",id:"sets",children:[{value:"Using intervals over sets",id:"using-intervals-over-sets",children:[]},{value:"Shorthands",id:"shorthands",children:[]}]},{value:"Quantifiers",id:"quantifiers",children:[{value:"When you have multiple ocurrencies (+)",id:"when-you-have-multiple-ocurrencies-",children:[]},{value:"Using the plus operator to get a group",id:"using-the-plus-operator-to-get-a-group",children:[]},{value:"Zero or more (*)",id:"zero-or-more-",children:[]},{value:"Keys for specific numbers {n,m}",id:"keys-for-specific-numbers-nm",children:[]},{value:"Greedy or lazy",id:"greedy-or-lazy",children:[]}]},{value:"Groups",id:"groups",children:[]},{value:"Challanges \ud83d\udca9",id:"challanges-",children:[{value:"file list",id:"file-list",children:[]},{value:"3 spaces",id:"3-spaces",children:[]},{value:"regex CPF",id:"regex-cpf",children:[]},{value:"regex phone numbers",id:"regex-phone-numbers",children:[]},{value:"regex Email",id:"regex-email",children:[]}]}],d={toc:p};function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"regex-pela-cod3rs"},"Regex pela Cod3rs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.cod3r.com.br/courses/take/regex-cursos-de-expressoes-regulares/lessons/9335655-o-que-e-expressao-regular"},"link da aula")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://regex101.com/"},"website para testar"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Starting with regexs")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = 'Casa bonita \xe9 a casa amarela da esquina com a Rua ACASALAR.'\n\nconst regex = /casa/gi\ntext.match(regex) // ['Casa', 'casa', 'CASA']\ntext.match(/a b/)) // ['a b']\n")),(0,l.kt)("h2",{id:"meta-characters"},"Meta characters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"character"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},".")),(0,l.kt)("td",{parentName:"tr",align:null},"Dot."),(0,l.kt)("td",{parentName:"tr",align:null},"Any character")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]")),(0,l.kt)("td",{parentName:"tr",align:null},"Group"),(0,l.kt)("td",{parentName:"tr",align:null},"allowed group of characters")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[^]")),(0,l.kt)("td",{parentName:"tr",align:null},"Group Negation"),(0,l.kt)("td",{parentName:"tr",align:null},"forbidden character group")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Quantificatives"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?")),(0,l.kt)("td",{parentName:"tr",align:null},"Optional"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero or one")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"*")),(0,l.kt)("td",{parentName:"tr",align:null},"Star"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero or more")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"+")),(0,l.kt)("td",{parentName:"tr",align:null},"Plus"),(0,l.kt)("td",{parentName:"tr",align:null},"More than one")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{n,m}")),(0,l.kt)("td",{parentName:"tr",align:null},"Keys"),(0,l.kt)("td",{parentName:"tr",align:null},"From n to M")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Anchors"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"^")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Beginning of the line")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$")),(0,l.kt)("td",{parentName:"tr",align:null},"Dolar"),(0,l.kt)("td",{parentName:"tr",align:null},"End of line")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"\\b")),(0,l.kt)("td",{parentName:"tr",align:null},"Border"),(0,l.kt)("td",{parentName:"tr",align:null},"Beginning or end of Word")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Generics"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\ "),(0,l.kt)("td",{parentName:"tr",align:null},"Scape"),(0,l.kt)("td",{parentName:"tr",align:null},"Scape the meta-character")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"(pipe)"),(0,l.kt)("td",{parentName:"tr",align:null},"Or"),(0,l.kt)("td",{parentName:"tr",align:null},"Oo operation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"()")),(0,l.kt)("td",{parentName:"tr",align:null},"Group"),(0,l.kt)("td",{parentName:"tr",align:null},"Defines a group")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"\\1..\\9")),(0,l.kt)("td",{parentName:"tr",align:null},"Rearview"),(0,l.kt)("td",{parentName:"tr",align:null},"Restore an predefined grou")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '0,1,2,3,4,5,6,a.b c!d?e'\nconst regexPonto = /\\./g\n\ntext.split(regexPonto) // ['0,1,2,3,4,5,6,a', 'b c!d?e']\n")),(0,l.kt)("h3",{id:"dot--meta-character"},"(Dot) \u23fa meta character"),(0,l.kt)("p",null,"It's a wild card for one position, it can be any character at the string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '1,2,3,4,5,6,7,8,9,0'\ntext.match(/1.2/g) // ['1,2']\ntext.match(/1..,/g) // ['1,2,']\n\nconst grades = '8.3,7.1,8.8,10.0'\ngrades.match(/.\\../g) //['8.3', '7,1', '8.8', '0.0']\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Be aware it doesnt solve the problem for breaking lines, eg: 'Bom\\ndia' with a ",(0,l.kt)("inlineCode",{parentName:"p"},"/./gi")," returns ","['B','o','m','d','i','a']"," without the \\n\nsome languages implements it as a flag dotall ",(0,l.kt)("inlineCode",{parentName:"p"},"/exp/s")," but not Javascript")),(0,l.kt)("h3",{id:"white-spaces"},"white spaces"),(0,l.kt)("p",null,"we can use the \\t to find tabs and \\s for spaces'"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = `\nca r\nr o s!                            \n`\ntext.match(/ca\\tr\\nr\\to\\ss!/) // ca\\tr\\nr\\to s!\n")),(0,l.kt)("h3",{id:"using-the-pipe-or"},"Using the pipe Or"),(0,l.kt)("p",null,"A simple way to have an alternative in a condition."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = \"voc\xea precisa responder sim, n\xe3o ou n\xe3o sei!\"\ntext.match(/sim|n\xe3o|sei/g) // ['sim', 'n\xe3o', 'n\xe3o']\n// to ignore the special character\ntext.match(/sim|n.o|sei/g) // ['sim', 'n\xe3o', 'n\xe3o']\n")),(0,l.kt)("h2",{id:"flags-"},"Flags \ud83d\udea9"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\ud83d\udea9"),(0,l.kt)("th",{parentName:"tr",align:null},"\u2753"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"//g")),(0,l.kt)("td",{parentName:"tr",align:null},"is for global, search for all matchs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"//i")),(0,l.kt)("td",{parentName:"tr",align:null},"ignore cases")))),(0,l.kt)("p",null,"some examples in JS \ud83d\udc4c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = 'Carlos assinou o abaixo-assinado'\ntext.match(/C|ab/) // just C\ntext.match(/c|ab/i) // C again because of the ignore case flag\ntext.match(/ab|c/gi) // C and ab for the global case is active\n")),(0,l.kt)("h2",{id:"how-to-execute-regex-in-some-languages"},"How to execute regex in some languages"),(0,l.kt)("p",null,"running with javascript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g'\nconst regexNove = RegExp('9')\n\nregexNove.test(text) // true \nregexNove.exec(text) // executes and return true\n\nconst regexLetras = /[a-f]/g\ntext.match(regexLetras) // String method\ntext.search(regexLetras) // 20 -> index where it starts\ntext.replace(regexLetras, 'Found') // 0,1,2,3,4,5,6,7,8,9,Found,Found,Found,Found,Found,g\ntext.split(regexLetras)// ['0,1,2,3,4,5,6,7,8,9',',',',',',',',',',',',']\n")),(0,l.kt)("p",null,"examples in golang"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-golang"},'func main() {\n    text := "0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f"\n\n    regex9, _ := regexp.compile("9")\n    fmt.Println(regex9.MatchString(text)) // true\n    fmt.Println(regex9.FindString(text)) // true: 9\n    fmt.Println(regex9.FindStringIndex(text)) // true: [18 19]\n\n    regexLetras, _ := regex.Compile("[a-f]")\n    fmt.Println(regexLetras.FindAllString(text, 20)) // true [18 19] -> first 20 -> [a b c d e f]\n    fmt.PrintLn(regexLetras.ReplaceAllStrinhs(text,  "Found")) // 0,1,2,3,4,5,6,7,8,9,Found,Found,Found,Found,Found\n}\n')),(0,l.kt)("h2",{id:"basic-characters"},"Basic characters"),(0,l.kt)("p",null,"literal strings search"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text =  '0,1,2,3,4,5,6,a.b c!d?e'\n\nconst regexVirgula = /,/\ntext.split(regexVirgula) // ['0','1','2','3','4','5','6','a.b c!d?e']\ntext.match(regexVirgula) // [',']\n\n")),(0,l.kt)("h2",{id:"sets"},"Sets"),(0,l.kt)("p",null,"to define a set we use the charaters: ",(0,l.kt)("inlineCode",{parentName:"p"},"[]"),"."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Inside of a set, the meta characters, eg: '.$+*?-' works as a literal word, not as a wildcard, so we don't need to scape them")),(0,l.kt)("p",null,"some basic examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '1,2,3,4,5,6,a.b c!d?e[f'\nconst regexPares = /[02468]/g\ntext.match(regexPares) // ['2', '4', '6']\n")),(0,l.kt)("p",null,"and we can use a literal letter and a next character inside of a set"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = 'Jo\xe3o n\xe3o vai passear na moto'\ntext.match(/n[a\xe3]/g) // ['n\xe3', 'na']\n")),(0,l.kt)("p",null,"we can negate a set using ",(0,l.kt)("inlineCode",{parentName:"p"},"^")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '1,2,3,4,5,6,a.b c!d?e[f'\ntext.match(/[^0-9]/g) // a.b c!d?e[f\n// same as \ntext.match(/\\D/g)\n")),(0,l.kt)("p",null,"using shorthans with symbols"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '1,2,3,4,5,6,a.b c!d?e[f'\ntext.match(/[^\\d!\\?\\[\\s,\\.]/g) //a.b c!d?e[f\n// is the same as\ntext.match(/[^\\d]/g) //a.b c!d?e[f\n")),(0,l.kt)("h3",{id:"using-intervals-over-sets"},"Using intervals over sets"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = '1,2,3,4,5,6,a.b c!d?e[f'\ntext.match(/[a-z]/g) // all letters\ntext.match(/[A-Z1-3]/gi) // ['1','2','3','a','b','c','d','e','f']\n")),(0,l.kt)("h3",{id:"shorthands"},"Shorthands"),(0,l.kt)("p",null,"Instead of defining groups for everything, we can use a shorthand to solve the same problem\ngiving the following string"),(0,l.kt)("p",null,'"1,2,3,4,5,6,a.b c!d?e\\t-\\nf_g"'),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\ud83d\udea9"),(0,l.kt)("th",{parentName:"tr",align:null},"\u2753"),(0,l.kt)("th",{parentName:"tr",align:null},"{}"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/\\d/g")),(0,l.kt)("td",{parentName:"tr",align:null},"digits ",(0,l.kt)("inlineCode",{parentName:"td"},"[0-9]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[1,2,3,4,5,6]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/\\D/g")),(0,l.kt)("td",{parentName:"tr",align:null},"not digits ",(0,l.kt)("inlineCode",{parentName:"td"},"[^0-9]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[',',',',',',',',\\t']"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/\\w/g")),(0,l.kt)("td",{parentName:"tr",align:null},"characters from ",(0,l.kt)("inlineCode",{parentName:"td"},"[a-zA-Z0-9]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[1,2,3,4,5,6,a,b,c,d,e,f,_,g]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/\\W/g")),(0,l.kt)("td",{parentName:"tr",align:null},"not characters: ",(0,l.kt)("inlineCode",{parentName:"td"},"[^a-zA-Z0-9]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[',',',',',',',',\\n,\\t]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/\\s/g")),(0,l.kt)("td",{parentName:"tr",align:null},"spaces: ",(0,l.kt)("inlineCode",{parentName:"td"},"[\\t\\n\\r\\t\\f]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[\\n,\\t,' ', \\r]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/\\S/g")),(0,l.kt)("td",{parentName:"tr",align:null},"not spaces: ",(0,l.kt)("inlineCode",{parentName:"td"},"[^ \\t\\n\\r\\t\\f]")),(0,l.kt)("td",{parentName:"tr",align:null},"every no space character")))),(0,l.kt)("h2",{id:"quantifiers"},"Quantifiers"),(0,l.kt)("p",null,"ways that we can use ",(0,l.kt)("inlineCode",{parentName:"p"},"{0,2}")," and so on"),(0,l.kt)("p",null,'finding where the character "o" is optional (?)'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = 'de longe eu avistei o fogo e uma pessoa gritando: FOGOOO'\nconst text2 = 'There is a big fog in NYC'\n\nconst regex = /fogo?/gi\n\ntext.match(regex) // [fogo, FOGO]\ntext2.match(regex) // [fog]\n")),(0,l.kt)("h3",{id:"when-you-have-multiple-ocurrencies-"},"When you have multiple ocurrencies (+)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = 'de longe eu avistei o fogo e uma pessoa gritando: FOGOOO'\nconst text2 = 'There is a big fog in NYC'\n\nconst regex = /fogo+/gi\n\ntext.match(regex) // [fogo, FOGO]\ntext2.match(regex) // null\n")),(0,l.kt)("h3",{id:"using-the-plus-operator-to-get-a-group"},"Using the plus operator to get a group"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = \"Os n\xfameros: 0123456789\"\ntext.match(/\\d/g) // [0,1,2,3,4,5,6,7,8,9]\ntext.match(/\\d+/g) // ['0123456789'] <- one element\n// to not sum\ntext.match(/\\d+?/g) // [0,1,2,3,4,5,6,7,8,9]\n")),(0,l.kt)("h3",{id:"zero-or-more-"},"Zero or more (*)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascriptm"},"const text = 'de longe eu avistei o fogo e uma pessoa gritando: FOGOOO'\nconst text2 = 'There is a big fog in NYC'\n\nconst regex = /fogo*/gi\n\ntext.match(regex) // [fogo, FOGO]\ntext2.match(regex) // [fog]\n")),(0,l.kt)("h3",{id:"keys-for-specific-numbers-nm"},"Keys for specific numbers {n,m}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const text = "O Jo\xe3o recebeu 120 milh\xf5es apostando em 6 9 21 23 45 46"\ntext.match(/\\d{1,2}/g) //[12, 0, 6, 9, 21, 23, 45, 46]\ntext.match(/[0-9]{2}/g)//[12, 21, 23, 45, 46]\ntext.match(/\\d{1,}/g) //[120, 6, 9, 21, 23, 45, 46]\n//or better using borders\ntext.match(/\\b\\d{1,2}\\b/g)//[6, 9, 21, 23, 45, 46]\n\n// for words\ntext.match(/\\w{7}/g) // [recebeu, apostand] <- for having \xf5, milh\xf5es doesnt include for not being part of \\w\ntext.match(/\\b[\\w\xf5]{7}\\b/g) // [recebeu, milh\xf5es]\n')),(0,l.kt)("h3",{id:"greedy-or-lazy"},"Greedy or lazy"),(0,l.kt)("p",null,"quantifiers are greedy by default"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = `<div>Conteudo 01</div><div>Conteudo 02</div>`\ntext.match(/<div>.+<\\/div>/g) // [<div>Conteudo 01</div><div>Conteudo 02</div>] <- greedy\ntext.match(/<div>.+?<\\/div>/g) // [<div>Conteudo 01</div>, <div>Conteudo 02</div>] <- greedylazy\n")),(0,l.kt)("h2",{id:"groups"},"Groups"),(0,l.kt)("p",null,"They are defined using ",(0,l.kt)("inlineCode",{parentName:"p"},"()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const texto = `O Jos\xe9 Sim\xe3o \xe9 muito engra\xe7ado... hehehehehehe`\ntexto.match(/(he)+/g) // ["hehehehehehe"]\n')),(0,l.kt)("p",null,"To match urls: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = `\nhttp://www.site.info\nwww.escola.ninja.com.br\ngoogle.com.ag\nhttp://www.site.info\n\nand some other ones eve. don`\n\ntext.match(/(https?:\\/\\/)?(www.)?\\w+\\.\\w{2,}(\\.\\w{2})?/g) // all of them\n")),(0,l.kt)("h2",{id:"challanges-"},"Challanges \ud83d\udca9"),(0,l.kt)("p",null,"some regex challanges "),(0,l.kt)("h3",{id:"file-list"},"file list"),(0,l.kt)("p",null,"how many .mp3 can we find in this string?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text =\"lista de arquivos mp3: jazz.mp3, rock.mp3, podcast.mp3, blues.mp3\"\ntext.match(`/\\.mp3/g`) // ['.mp3', '.mp3', '.mp3', '.mp3'] \n// for the hole word\ntext.match(/\\w+\\.mp3/g) // ['jazz.mp3', 'rock.mp3', 'podcast.mp3', 'blues.mp3']\n")),(0,l.kt)("h3",{id:"3-spaces"},"3 spaces"),(0,l.kt)("p",null,"create an regex that finds 3 spaces in a string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const text = 'a   b'\ntext.match(/a\\s{3}b/)\n// or even better\ntext.match(/a\\s+b/)\n")),(0,l.kt)("h3",{id:"regex-cpf"},"regex CPF"),(0,l.kt)("p",null,"get the CPF numbers from a string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const aprooved = `\nCPF dos aprovados:\n- 600.567.980-12\n- 765.998.345-23\n- 333\n`\naprooved.match(/\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}/gm // ["600.567.980-12", "765.998.345-23"]\n')),(0,l.kt)("h3",{id:"regex-phone-numbers"},"regex phone numbers"),(0,l.kt)("p",null,"create a list of phone numbers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const phones = `\nLista telef\xf4nica:\n- (11) 98756-1212\n-98765-4321\n-987654321\n`\nphones.match(/[(\\d{2})]?\\s?\\d+-?\\d+/gm) // ["(11) 98756-1212","98765-4321","987654321"]\n')),(0,l.kt)("h3",{id:"regex-email"},"regex Email"),(0,l.kt)("p",null,"for emails in general"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const text = `\nOs emails dos convidados s\xe3o:\n- fulano@cod3r.com.br\n- xico@gmail.com\n- caina@mbr.mx\n- sampaio@sample.de\ne assim por diante com emails como d@d.com`\ntext.match(/[\\w.]+@[\\w+.]+/gm) // ["fulano@cod3r.com.br","xico@gmail.com","caina@mbr.mx","sampaio@sample.de","d@d.com"]\n')))}c.isMDXComponent=!0}}]);