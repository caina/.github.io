(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[3591],{3905:function(e,a,t){"use strict";t.d(a,{Zo:function(){return c},kt:function(){return d}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),p=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?n.createElement(v,s(s({ref:a},c),{},{components:t})):n.createElement(v,s({ref:a},c))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7792:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var n=t(2122),r=t(9756),o=(t(7294),t(3905)),s=["components"],i={id:"design-pattern",title:"Design patterns",sidebar_label:"Design Patterns"},l={unversionedId:"design-pattern",id:"design-pattern",isDocsHomePage:!1,title:"Design patterns",description:"Abstract ou interface, qual a diferen\xe7a?",source:"@site/docs/design-pattern.md",sourceDirName:".",slug:"/design-pattern",permalink:"/docs/design-pattern",version:"current",sidebar_label:"Design Patterns",frontMatter:{id:"design-pattern",title:"Design patterns",sidebar_label:"Design Patterns"},sidebar:"someSidebar",previous:{title:"Learning german",permalink:"/docs/german-learne"},next:{title:"Hooked Creating Habbit formimg apps",permalink:"/docs/hooked-how-to-create-habit-forming-apps"}},p=[{value:"Strategy pattern.",id:"strategy-pattern",children:[{value:"Composi\xe7\xe3o vs Heran\xe7a",id:"composi\xe7\xe3o-vs-heran\xe7a",children:[]}]},{value:"Observer Pattern.",id:"observer-pattern",children:[]},{value:"Decorator Pattern",id:"decorator-pattern",children:[]}],c={toc:p};function u(e){var a=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Abstract ou interface, qual a diferen\xe7a?")),(0,o.kt)("p",null,"Classes abstratas n\xe3o podem ser instanciadas, apenas extendidas, interfaces precisam ser implementadas."),(0,o.kt)("h2",{id:"strategy-pattern"},"Strategy pattern."),(0,o.kt)("h3",{id:"composi\xe7\xe3o-vs-heran\xe7a"},"Composi\xe7\xe3o vs Heran\xe7a"),(0,o.kt)("p",null,"Heran\xe7a \xe9 orienta\xe7\xe3o a objetos simples, enquanto composi\xe7\xe3o \xe9 uma camada que chama os m\xe9todos necess\xe1rios em uma certa ordem"),(0,o.kt)("p",null,'Imagina que tu tem uma classe pato, e uma pato do mato, dando um override no voar tu monta teu pato. Agora tu tem um novo pato "pato das trevas" que voa como o pato do mato, ai tu j\xe1 tem problemas na heran\xe7a.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"               +----------+\n               |  Duck    |\n               +----------+\n               |  Fly()   |\n               |  Eat()   |\n               |          |\n               ++--------++\n                |        |\n                |        |\n+----------+    |        |  +----------+\n|  Duck2   | <--+        +->+  Duck 3  |\n+----------+                +----------+\n|  Fly() +----------------\x3e |  Fly()   |\n|  Eat()   |                |  Eat()   |\n|          |                |          |\n+----------+                +----------+\n\n")),(0,o.kt)("p",null,"Ao inv\xe9s disso, ",(0,o.kt)("inlineCode",{parentName:"p"},"Fly")," e ",(0,o.kt)("inlineCode",{parentName:"p"},"Eat")," seriam interfaces na classe ",(0,o.kt)("inlineCode",{parentName:"p"},"Duck"),', como um "IQuackBehavior", Fazendo com que a heran\xe7a seja menor mas \xe9 mais f\xe1cil de modificar caso um dos patos tenha uma implementa\xe7\xe3o diferente'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IQuackBehavior { Quack() }\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'Podemos tamb\xe9m injetar o "quack" e display na classe, o que facilita nos testes,\ne deixar a classe mais segura, caso use o injector no construtor. ')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class Duck {\n  IFlyBehavior;\n  IQuackBehavior;\n  IDisplayBehavior;\n  \n  public Duck(IFlyBehavior,IQuackBehavior,IDisplayBehavior){\n    this.IDisplayBehavior = IDisplayBehavior;\n    this.IQuackBehavior = IQuackBehavior;\n    this.IDisplayBehavior = IDisplayBehavior;\n  }\n  \n  public void Fly() {\n    this.IFlyBehavior.fly();\n  }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Isso trabalha com o Open closed principle, j\xe1 que agora tu s\xf3 precisa criar novos Behaviors mas o pato ser\xe1\nsempre o mesmo pato! Isso \xe9 genial.")),(0,o.kt)("h2",{id:"observer-pattern"},"Observer Pattern."),(0,o.kt)("p",null,"Essencialmente \xe9 um: Push vs Poll"),(0,o.kt)("p",null,'O problema que estamos tentando resolver \xe9 uma classe fazendo pulling em outra perguntando o estado dela: "voc\xea j\xe1 atualizou?" E isso escalado em um grande grupo de classes perguntando se elas j\xe1 atualizaram pode ser um grande problema de performance.'),(0,o.kt)("p",null,"Observer pattern faz com que movemos de polling para push, a classe fica respons\xe1vel em avisar aos que se subscreveram que ela atualizou."),(0,o.kt)("p",null,"Ele separa em quem observa e quem \xe9 observado. \xc9 uma rela\xe7\xe3o de 1 para N."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  +-----------------+       +------------+\n  |IObservable      |       | IObserver  |\n  +-----------------+       +------------+\n  |Add(IObserver)   |       | Update()   |\n  |Remove(IObserer) +----------\x3e         |\n  |notify( )        |       |            |\n  +-------+---------+       +-------+----+\n          ^                         ^\n+---------+----------+      +-------+------------+\n| ConcreteObservable |      |  ConcreteObserver  |\n+--------------------+      +--------------------+\n| Add()              |      |  Update()          |\n| Remove()           |      |                    |\n| Notify()         <--------+                    |\n|                    |      |                    |\n| GetState()         |      +--------------------+\n| SetState()         |\n+--------------------+\n\n")),(0,o.kt)("p",null,"SetState e GetState s\xe3o metodos gen\xe9ricos para que nossa aplica\xe7\xe3o fa\xe7a algo, como em um chat em que pegamos dados do banco e setamos o estado de uma sala."),(0,o.kt)("p",null,"O Observer tamb\xe9m fica com uma referencia da classe observada, para poder executar m\xe9todos, por\xe9m ela n\xe3o deve nunca ter acesso ao stream de dados, quem observa jamais pode ter a habilidade de atualizar diretamente o estado do observado."),(0,o.kt)("p",null,"Algo mais ou menos assim."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'// New ConcreteObserver(Concrete)\n\nWheatherStation station = new WheatherStation();\nPhoneDisplay display = new PhoneDisplay(station);\n\nstation.add(display);\nstation.notify("yei!")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Interface IObserver {\n Update()\n}\n\nInterface IObservable {\n  Add(IObserver)\n  Remove(IObserver)\n  Notify()\n}\n\nclass WeatherStation implements IObservable {\n private List<IObserver> observers;\n \n public void add (IObserver o){\n  this.observers.add(o)\n }\n \n}\n")),(0,o.kt)("h2",{id:"decorator-pattern"},"Decorator Pattern"),(0,o.kt)("p",null,"\xc9 um Wrapper em uma classe, adicionando responsabilidades adicionais ao objeto dinamicamente."))}u.isMDXComponent=!0}}]);